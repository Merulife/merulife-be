name: CI/CD Pipeline

on:
  push:
    branches: [ master ]

jobs:
  build_and_push:
    runs-on: ubuntu-latest  # You can still use GitHub-hosted runner for building
    env:
      AWS_REGION: ap-south-1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to AWS ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: private

      - name: Build Docker Image
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker build . --file Dockerfile --tag $ECR_REPOSITORY:$IMAGE_TAG

      - name: Push Docker Image to ECR
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          docker push $ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build_and_push
    runs-on: self-hosted  # This job will run on your self-hosted runner (EC2)
    steps:
      - name: Deploy to EC2
        run: |
          IMAGE_TAG=${GITHUB_SHA::7}
          # Stop and remove the existing container (if it exists)
          docker stop myapp || true
          docker rm myapp || true
          # Log in to ECR (if not already configured via IAM role)
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REPOSITORY
          # Pull the new image from ECR
          docker pull $ECR_REPOSITORY:$IMAGE_TAG
          # Run the container with necessary environment variables
          docker run -d --name myapp -p 3000:3000 -e DATABASE_URL="${DATABASE_URL}" $ECR_REPOSITORY:$IMAGE_TAG
